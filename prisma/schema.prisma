// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

<<<<<<< HEAD
model User {
  id       String  @id @default(uuid())
  email    String  @unique
  userId   String 
  streamId String
  provider String
  session  Session[]
  accounts Account[]
  streams  Stream[]
  upvotes  Upvote[]
  @@unique([userId, streamId])
}
=======
>>>>>>> 6cd04dca1dd0feca342e62801c7166cbf176bfcf

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(EndUser)
  streams       Stream[]
  upvotes       Upvote[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
model Stream {
  id             String  @id @default(uuid())
  type           StreamType
  url            String
  extractedId    String
  active         Boolean @default(true)
  upvotes        Upvote[]
  userId         String
  user User      @relation(fields: [userId], references: [id])
}

model Upvote{
  id        String  @id @default(uuid())
  userId    String
  streamId  String
  user      User @relation(fields: [userId], references: [id])
  stream    Stream @relation(fields: [streamId], references: [id])
  @@unique([userId, streamId])
  }

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
} 

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

 model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
} 

enum StreamType {
  Spotify
  Youtube
}

enum Provider {
   Google
  }

enum Role {
  Streamer
  EndUser
}